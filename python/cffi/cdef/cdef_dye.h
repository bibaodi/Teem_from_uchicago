
/* NOTE: This file is a *very* hacked up version of the original
teem/dye.h, generated by build_teem.py to declare the dye API to
CFFI, within its many limitations, specifically lacking a C pre-processor
(so no #include directives, and only certain #defines). */
 /* =========== dye.h =========== */
/*
  Teem: Tools to process and visualize scientific data and images
  Copyright (C) 2009--2023  University of Chicago
  Copyright (C) 2005--2008  Gordon Kindlmann
  Copyright (C) 1998--2004  University of Utah
  This library is free software; you can redistribute it and/or modify it under the terms
  of the GNU Lesser General Public License (LGPL) as published by the Free Software
  Foundation; either version 2.1 of the License, or (at your option) any later version.
  The terms of redistributing and/or modifying this software also include exceptions to
  the LGPL that facilitate static linking.
  This library is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License along with
  this library; if not, write to Free Software Foundation, Inc., 51 Franklin Street,
  Fifth Floor, Boston, MA 02110-1301 USA
*/
enum {
  dyeSpaceUnknown, /* 0: nobody knows */
  dyeSpaceHSV,     /* 1: single hexcone */
  dyeSpaceHSL,     /* 2: double hexcone */
  dyeSpaceRGB,     /* 3: obscure, deprecated */
  dyeSpaceXYZ,     /* 4: perceptual primaries */
  dyeSpaceLAB,     /* 5: 1976 CIE (L*a*b*) (based on Munsell) */
  dyeSpaceLUV,     /* 6: 1976 CIE (L*u*v*) */
  dyeSpaceLCH,     /* 7: polar coord version of L*a*b* */
  dyeSpaceLast
};
#define DYE_MAX_SPACE 7
typedef struct {
  float val[2][3];      /* room for two colors: two triples of floats */
  float xWhite, yWhite; /* chromaticity for white point */
  int spc[2],           /* the spaces the two colors belong to */
    ii;                 /* which (0 or 1) of the two values is current */
} dyeColor;
/* methodsDye.c */
extern const int dyePresent;
extern const char *const dyeBiffKey;
extern const char *const dyeSpaceToStr[DYE_MAX_SPACE + 1];
extern const airEnum *const dyeSpace;
extern int dyeStrToSpace(char *str);
extern dyeColor *dyeColorInit(dyeColor *col);
extern dyeColor *dyeColorSet(dyeColor *col, int space, float v0, float v1, float v2);
extern int dyeColorGet(float *v0P, float *v1P, float *v2P, dyeColor *col);
extern int dyeColorGetAs(float *v0P, float *v1P, float *v2P, dyeColor *col,
                             int space);
extern dyeColor *dyeColorNew(void);
extern dyeColor *dyeColorCopy(dyeColor *c1, dyeColor *c0);
extern dyeColor *dyeColorNix(dyeColor *col);
extern int dyeColorParse(dyeColor *col, char *str);
extern char *dyeColorSprintf(char *str, dyeColor *col);
/* convertDye.c */
typedef void (*dyeConverter)(float *, float *, float *, float, float, float);
extern void dyeRGBtoHSV(float *H, float *S, float *V, /* */
                            float R, float G, float B);
extern void dyeHSVtoRGB(float *R, float *G, float *B, /* */
                            float H, float S, float V);
extern void dyeRGBtoHSL(float *H, float *S, float *L, /* */
                            float R, float G, float B);
extern void dyeHSLtoRGB(float *R, float *G, float *B, /* */
                            float H, float S, float L);
extern void dyeRGBtoXYZ(float *X, float *Y, float *Z, /* */
                            float R, float G, float B);
extern void dyeXYZtoRGB(float *R, float *G, float *B, /* */
                            float X, float Y, float Z);
extern void dyeXYZtoLAB(float *L, float *A, float *B, /* */
                            float X, float Y, float Z);
extern void dyeXYZtoLUV(float *L, float *U, float *V, /* */
                            float X, float Y, float Z);
extern void dyeLABtoXYZ(float *X, float *Y, float *Z, /* */
                            float L, float A, float B);
extern void dyeLUVtoXYZ(float *X, float *Y, float *Z, /* */
                            float L, float U, float V);
extern void dyeLABtoLCH(float *Lp, float *C, float *H, /* */
                            float L, float A, float B);
extern void dyeLCHtoLAB(float *Lp, float *A, float *B, /* */
                            float L, float C, float H);
extern void dyeXYZtoLCH(float *L, float *C, float *H, /* */
                            float X, float Y, float Z);
extern void dyeLCHtoXYZ(float *X, float *Y, float *Z, /* */
                            float L, float C, float H);
extern dyeConverter const dyeSimpleConvert[DYE_MAX_SPACE + 1][DYE_MAX_SPACE + 1];
extern int dyeConvert(dyeColor *col, int space);
