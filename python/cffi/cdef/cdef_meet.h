
/* NOTE: This file is a *very* hacked up version of the original
teem/meet.h, generated by build_teem.py to declare the meet API to
CFFI, within its many limitations, specifically lacking a C pre-processor
(so no #include directives, and only certain #defines). */
 /* =========== meet.h =========== */
/*
  Teem: Tools to process and visualize scientific data and images
  Copyright (C) 2009--2023  University of Chicago
  Copyright (C) 2005--2008  Gordon Kindlmann
  Copyright (C) 1998--2004  University of Utah
  This library is free software; you can redistribute it and/or modify it under the terms
  of the GNU Lesser General Public License (LGPL) as published by the Free Software
  Foundation; either version 2.1 of the License, or (at your option) any later version.
  The terms of redistributing and/or modifying this software also include exceptions to
  the LGPL that facilitate static linking.
  This library is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License along with
  this library; if not, write to Free Software Foundation, Inc., 51 Franklin Street,
  Fifth Floor, Boston, MA 02110-1301 USA
*/
/* TEEM_LIB_LIST */
/* enumall.c: (not really a descriptive filename) */
extern const int meetPresent;
extern const char *const meetBiffKey;
extern const airEnum **meetAirEnumAll(void);
extern void meetAirEnumAllPrint(FILE *file);
extern int meetAirEnumAllCheck(void);
extern const char *const meetTeemLibs[];
/* meetNrrd.c */
extern const NrrdKernel **meetNrrdKernelAll(void);
extern int meetNrrdKernelAllCheck(void);
/* meetGage.c */
extern gageKind *meetGageKindParse(const char *str);
extern const gageKind *meetConstGageKindParse(const char *str);
extern const hestCB *const meetHestGageKind;
extern const hestCB *const meetHestConstGageKind;
/*
******** meetPullVol
**
** this is information that somehow precedes the full pullVolume; it
** is more likely to have been by the user, and is not everything that
** a pullVolume is ("Vol" vs "Volume").  Does provide a way of parsing
** a string to specify all this info (useful for command-line).  Note
** that the nrrds inside are owned by this, in contrast to the
** pullVolume.
**
** One constraint that motivates putting this in meet (instead of
** pull) is that this has to be general WRT gageKind; and will
** ultimately rely on meetConstGageKindParse.  So, either
** meetConstGageKindParse gets passed to pull as a callback, or this
** functionality moves up to meet.  Also, given the weird leeching
** tricks that are being enabled here, perhaps it is better for this
** to be properly outside of pull.
*/
typedef struct {
  const gageKind *kind;
  char *fileName, *volName;
  gageStackBlurParm *sbp; /* the right place to store everything about how to
                             pre-compute a blurring of an image, replacing
                             uniformSS, optimSS, needSpatialBlurSS,
                             rangeSS[2], numSS, and posSS.  More sensible to
                             have this here, now that gage can parse the
                             terse string-based description of scale-space
                             sampling that originated in meet (via Deft) */
  int leeching,           /* non-zero iff using the same nin and ninSS
                             as another meetPullVol (so as to avoid
                             redundant copies in memory) */
    derivNormSS,          /* normalize derivatives based on scale */
    recomputedSS;         /* (OUTPUT) non-zero if meetPullVolLoadMulti
                             had to recompute these, versus being read
                             from disk */
  double derivNormBiasSS; /* for gageParmStackNormalizeDerivBias */
  Nrrd *nin;              /* we DO own */
  Nrrd **ninSS;           /* we DO own */
} meetPullVol;
/*
******** meetPullInfo
**
** information that helps define a pullInfoSpec.
**
** The original reason that the pullInfo struct itself isn't being
** used here is that we want a way of parsing and storing this
** information from some source (e.g. command-line via hest), at a
** point where we do not yet know, or not have access to all the
** volumes and their gageKinds.  So, the gageItem information is
** stored here only as a string, rather than the real integral item
** number.
*/
typedef struct {
  int info,           /* which pullInfo is being defined */
    source,           /* the source (from pullSource* enum) */
    prop,             /* which property (if pullSourceProp) */
    constraint;       /* this info should be a constraint */
  char *volName,      /* name of volume from which info is measured */
    *itemStr;         /* which item in that volume gives the info */
  double zero, scale; /* affine mapping of scalar info */
} meetPullInfo;
/* meetPull.c */
extern meetPullVol *meetPullVolNew(void);
extern meetPullVol *meetPullVolCopy(const meetPullVol *mpv);
extern int meetPullVolParse(meetPullVol *mpv, const char *str);
extern int meetPullVolLeechable(const meetPullVol *lchr,
                                     const meetPullVol *orig,
                                     int *can,
                                     char explain[AIR_STRLEN_HUGE + 1]);
extern meetPullVol *meetPullVolNix(meetPullVol *pvol);
extern const hestCB *const meetHestPullVol;
extern int meetPullVolStackBlurParmFinishMulti(meetPullVol **mpv,
                                                    unsigned int mpvNum,
                                                    unsigned int *kssSetP,
                                                    unsigned int *bspSetP,
                                                    const NrrdKernelSpec *ksp,
                                                    const NrrdBoundarySpec *bsp);
extern int meetPullVolLoadMulti(meetPullVol **mpv, unsigned int mpvNum,
                                     char *cachePath, int verbose);
extern int meetPullVolAddMulti(pullContext *pctx, meetPullVol **mpv,
                                    unsigned int mpvNum, const NrrdKernelSpec *k00,
                                    const NrrdKernelSpec *k11, const NrrdKernelSpec *k22,
                                    const NrrdKernelSpec *kSSrecon);
extern meetPullInfo *meetPullInfoNew(void);
extern meetPullInfo *meetPullInfoNix(meetPullInfo *minf);
extern int meetPullInfoParse(meetPullInfo *minf, const char *str);
extern const hestCB *const meetHestPullInfo;
extern int meetPullInfoAddMulti(pullContext *pctx,
                                     meetPullInfo **minf,
                                     unsigned int minfNum);
